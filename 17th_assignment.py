# -*- coding: utf-8 -*-
"""17th assignment

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kHVDV4BE6yN6y0AWamHBi3HEtzbEcouO
"""

#first solution
def firstUniqChar(s):
    char_count = {}

    # Count the occurrences of each character
    for char in s:
        if char in char_count:
            char_count[char] += 1
        else:
            char_count[char] = 1

    # Find the first non-repeating character
    for i in range(len(s)):
        if char_count[s[i]] == 1:
            return i

    return -1

#second solution
def maxSubarraySumCircular(nums):
    total_sum = nums[0]
    curr_max = nums[0]
    max_sum = nums[0]
    curr_min = nums[0]
    min_sum = nums[0]

    for i in range(1, len(nums)):
        total_sum += nums[i]

        curr_max = max(nums[i], curr_max + nums[i])
        max_sum = max(max_sum, curr_max)

        curr_min = min(nums[i], curr_min + nums[i])
        min_sum = min(min_sum, curr_min)

    if max_sum > 0:
        return max(max_sum, total_sum - min_sum)

    return max_sum

#third solution
from collections import deque

def countStudents(students, sandwiches):
    queue = deque(students)
    count = 0

    for sandwich in sandwiches:
        if queue[0] == sandwich:
            queue.popleft()
            count = 0
        else:
            queue.append(queue.popleft())
            count += 1

        if count == len(queue):
            break

    return len(queue)

#forth solution
from collections import deque

class RecentCounter:
    def __init__(self):
        self.requests = deque()

    def ping(self, t: int) -> int:
        self.requests.append(t)

        while self.requests[0] < t - 3000:
            self.requests.popleft()

        return len(self.requests)

#fifth solution
def findTheWinner(n, k):
    friends = list(range(1, n + 1))
    curr = 0

    while len(friends) > 1:
        curr = (curr + k - 1) % len(friends)
        friends.pop(curr)

    return friends[0]

#sixth solution
from collections import deque

def deckRevealedIncreasing(deck):
    n = len(deck)
    sorted_deck = sorted(deck)
    queue = deque(range(n))
    result = [0] * n

    for card in sorted_deck:
        result[queue.popleft()] = card
        if queue:
            queue.append(queue.popleft())

    return result

#seventh solution
from collections import deque

class FrontMiddleBackQueue:
    def __init__(self):
        self.front_queue = deque()
        self.back_queue = deque()

    def pushFront(self, val: int) -> None:
        self.front_queue.appendleft(val)

    def pushMiddle(self, val: int) -> None:
        if len(self.front_queue) <= len(self.back_queue):
            self.front_queue.append(self.back_queue.popleft())
        self.front_queue.appendleft(val)

    def pushBack(self, val: int) -> None:
        self.back_queue.append(val)

    def popFront(self) -> int:
        if not self.front_queue and not self.back_queue:
            return 1
        if self.front_queue:
            return self.front_queue.popleft()
        while len(self.back_queue) > 1:
            self.front_queue.append(self.back_queue.popleft())
        return self.back_queue.popleft()

    def popMiddle(self) -> int:
        if not self.front_queue and not self.back_queue:
            return 1
        if len(self.front_queue) == len(self.back_queue):
            return self.front_queue.popleft()
        self.front_queue.append(self.back_queue.popleft())
        return self.front_queue.pop()

    def popBack(self) -> int:
        if not self.front_queue and not self.back_queue:
            return 1
        if self.back_queue:
            return self.back_queue

#eighth solution
from collections import deque

class DataStream:
    def __init__(self, value: int, k: int):
        self.stream = deque()
        self.value = value
        self.k = k

    def consec(self, num: int) -> bool:
        self.stream.append(num)
        if len(self.stream) < self.k:
            return False
        return list(self.stream)[-self.k:] == [self.value] * self.k